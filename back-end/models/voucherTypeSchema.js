import { Schema } from "mongoose";

const voucherSchema = new Schema({
    voucherNumber:{type:String, required:true},
    transaction:{type:Schema.Types.ObjectId, ref: 'Transaction', required:true},
}, {_id:false});

const transactionsSchema = new Schema({
    financialYear:{type:String, required:true},
    transactions:[voucherSchema],
    lastAutoGeneratedVchNo: {type:Number},
}, {_id: false});

// transactionsSchema.index({ 'transactions.voucherNumber': 1, financialYear: 1 }, { unique: true });

const voucherTypeSchema = new Schema({
    name:{type:String, required:true, unique:true},
    primaryType:{type:String, enum:['sales', 'purchase', 'payment', 'receipt', 'journal'], required:true},
    transactions:[transactionsSchema],
});

transactionsSchema.pre('save', function(next){
    const voucherNos = this.transactions.map(e => e.voucherNumber);
    if (voucherNos.length !== [...new Set(voucherNos)].length)
        next(new Error('Voucher Number already exists.'));
    const transacIds = this.transactions.map(e => e.transaction);
    if (transacIds.length !== [...new Set(transacIds)].length)
        next(new Error('Transaction already mapped to a voucher number.'));
    else next();
});

// voucherTypeSchema.pre('save', function(next){
//   console.log(this.transactions);
//   const finYrs = this.transactions.map(e => e.financialYear);
//   if (finYrs.length !== [...new Set(finYrs)].length)
//     next(new Error('Financial Year already exists.'));
//   else next();
// });

// voucherTypeSchema.pre('save', function(next){
//   this.transactions.forEach(year => {
//     const vchNos = year.transactions.map(e => e.voucherNumber);
//     const uniqueVchNos = new Set(vchNos);
//     if (vchNos.length !== uniqueVchNos.size)
//       next(new Error('Voucher Number already exists.'))
//   });
// });



export default voucherTypeSchema;
