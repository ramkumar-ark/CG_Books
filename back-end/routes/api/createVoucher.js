import { getDbController } from "../../db/accountingDb";
import updateClosingBalances from "../../utils/updateClosingBalances";
import updateOffsetTransactions from "./updateOffsetTransactions";

const createVoucher = async (req, res) => {
    let createdDocuments = [];
    
    try {
        const {otherDetails, transaction, voucherType, orgId} = req.body;
        let voucherNumber = req.body.voucherNumber;
        const dbController = await getDbController(orgId);
        // create other Details
        const otherDetailsId = await dbController.otherDetails.create(otherDetails);
        createdDocuments.push({controller:"otherDetails", docId:otherDetailsId});
        // create transaction
        
        const voucherTypeId = await dbController.voucherType.getId(voucherType);
        const transactionId = await dbController.transaction.create({...transaction, otherDetailsId, voucherTypeId});
        createdDocuments.push({controller:"transaction", docId:transactionId});
        // calculate and update closing balance of associated ledgers
        await updateClosingBalances(transaction, orgId);
        // get voucher number for purchase transaction.
        if (voucherType === 'Purchase'){ 
            const autoGeneratedVchNo = await dbController.voucherType.getLastAutoGeneratedVchNo(voucherType, transaction.transactionDate);
            voucherNumber = Number(autoGeneratedVchNo) + 1;
        }
        // add transaction to sales voucher
        const doc = await dbController.voucherType.addVoucherTransaction(
            transaction.transactionDate, voucherType, transactionId, voucherNumber
        );
        // update offset transactions in case of payment or receipt voucher
        if (voucherType === 'Receipt' || voucherType === 'Payment') {
            if (otherDetails.offSetTransactions.length > 0){
                req.body.isDelete = false;
                req.body.offsetTransactions = otherDetails.offSetTransactions;
                req.params.entityId = otherDetails.linkedEntity;
                req.params.transactionId = transactionId;
                req.params.orgId = orgId;
                await updateOffsetTransactions(req, res, true);
            }
        }
        res.json({transactionId});
    } catch (error) {
        console.log(error);
        const dbController = await getDbController(req.body.orgId);
        try {
            for (const doc of createdDocuments){
                await dbController[doc.controller].delete(doc.docId);
            }
            return res.status(403).json({error});
        } catch (err) {
            return res.status(403).json({err});
        }
    }
};

export default createVoucher;
