import {Form, Spin, Typography, Select, Input, Modal, Button, InputNumber, Checkbox, DatePicker, } from "antd";
import { IdcardOutlined,  } from '@ant-design/icons'
import { useEffect, useState } from "react";
import { useHistory, useParams } from "react-router-dom";
import useGetCustomers from "../../hooks/useGetCustomers";
import SelectCustomer from "./SelectCustomer";
import CustomerDetails from "../Invoices/CustomerDetails";
import useGetLedgerBalances from "../../hooks/useGetLedgerBalances";
import UnpaidInvoices from "./UnpaidInvoicesTable";
import AmountSummary from "./AmountSummary";
import { useCreateVoucherMutation, useUpdateOffsetTransactionsMutation } from "../../service/transactionsApi";
import useGetAutoGeneratedVchNo from "../../hooks/useGetAutoGeneratedVchNo";
import useGetBankAccounts from "../../hooks/useGetBankAccounts";
import getBankLedgerOpts from "../../utilities/getBankLedgerOpts";
import useGetUnpaidInvoices from "../../hooks/useGetUnpaidInvoices";
import useSelectedOrg from "../../hooks/useSelectedOrg";
import useGetLedgerIds from "../../hooks/useGetLedgerIds";
import transformData from "./transformDataForSubmit";
import useGetVoucher from "../../hooks/useGetVoucher";
import constructInitialValues from "./constructInitialValues";
import getUnpaidForEditReceipt from "./getUnpaidForEditReceipt";
import useUpdateVoucher from "../../hooks/useUpdateVoucher";

const {Title, Text} = Typography;

const RecordReceipt = ({edit}) => {
    const history = useHistory();
    const {transactionid} = useParams();
    const receiptData = useGetVoucher(transactionid);
    // Getting data for Select customer component and customer display component
    const {customerList, customerDataObj:customersObj} = useGetCustomers();
    const closingBalanceData = useGetLedgerBalances();
    let voucherNumber = useGetAutoGeneratedVchNo(edit ? undefined : 'Receipt');
    if(edit) voucherNumber = receiptData.voucherNumber;
    const bankAccounts = useGetBankAccounts();
    const unpaidInvoices = useGetUnpaidInvoices();
    const bankSelectOpts = getBankLedgerOpts(bankAccounts);
    const [bankChargesLedgerId] = useGetLedgerIds(['Bank Fees and Charges']);
    const {createdOn:opBalDate, userId, '_id':orgId} = useSelectedOrg();
    // states of the component
    const [selectedCustomer, setSelectedCustomer] = useState();
    const [openDrawer, setOpenDrawer] = useState(false);
    const [summaryData, setSummaryData] = useState({ received:0, used:0 });

    const [createVoucher, { isLoading, isSuccess, isError, error, data }] = useCreateVoucherMutation();
    const [updateOffsetTransactions, {isSuccess:isSuccess1}] = useUpdateOffsetTransactionsMutation();
    const [updateVoucher, {isLoading:isUpdating}] = useUpdateVoucher(transactionid, receiptData);

    const initialValues = edit ? constructInitialValues(receiptData, bankChargesLedgerId, bankAccounts) : 
        {voucherNumber, mode:'cash'};
    
    const [form] = Form.useForm();
    const handleCustomerSelection = (customerId) => {
        const closingBalance = closingBalanceData?.[customersObj[customerId].ledger?.['_id']] || 0;
        const unpaid = unpaidInvoices
            .filter(e => e.transaction.otherDetails.linkedEntity === customerId)
            .map(e => ({date:e.transaction.transactionDate, voucherNumber:e.voucherNumber, 
                invoiceAmount:e.transaction.otherDetails.totalAmount, 
                balanceDue:e.transaction.otherDetails.pendingAmount,
                dueDate:e.transaction.otherDetails.dueDate, transaction:e.transaction['_id'],
            }));
        customersObj[customerId].otherDetails.pendingAmount > 0 && unpaid.push({
            date:opBalDate, voucherNumber: 'Opening Balance', 
            invoiceAmount: customersObj[customerId].otherDetails.totalAmount,
            balanceDue: customersObj[customerId].otherDetails.pendingAmount, dueDate:opBalDate
        });
        unpaid.sort((a,b) => new Date(a.date) - new Date(b.date));
        const unpaidForEditReceipt = edit && getUnpaidForEditReceipt(
            unpaid, receiptData.otherDetails.offSetTransactions, opBalDate);
        form.setFieldValue('customer', customerId);
        customerId && setSelectedCustomer({
            ...customersObj[customerId], closingBalance, unpaid: edit ? unpaidForEditReceipt : unpaid
        });
    };
    
    const onReceiptAmtChange = (value) => {
        setSummaryData({...summaryData, received:value});
        console.log('receiptAmt');
    };
    const onUsedAmtChange = (value) =>{
        setSummaryData({...summaryData, used:value});
        console.log('usedAmt');
    };
    const onCheckBoxChange = (event) => {
        const amountReceived = event.target.checked ? selectedCustomer.closingBalance : null
        form.setFieldValue('amount', amountReceived);
        onReceiptAmtChange(amountReceived);
    };
    const ContentOfModalOnSubmit = () => (
        summaryData.received > summaryData.used ? 
            <Text>
                The Receipt Amount of ₹ {(summaryData.received-summaryData.used).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) + " "} 
                 has not been used against any invoice.  Do you want to treat the same as Advance?
            </Text> :
            <Text>
                Amount of ₹ {(summaryData.used-summaryData.received).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2}) + " "} 
                has been used in excess of received amount. Amount used against invoices cannot be greater than amount received.
            </Text>
    );
    const showModalOnSubmit = (values) => {
        const isAdvance = summaryData.received>summaryData.used;
        Modal[isAdvance ? 'confirm' : 'error']({
          title: isAdvance ? 'Treat as Advance?' : 'Invalid Amount!',
          content: <ContentOfModalOnSubmit/>,
          onOk() {if (isAdvance) onFinish(values)},
        });
    };
    const showModalOnSubmitFailed = () => {
        Modal.error({
            title:'Form Submission Failed', 
            content:<Text>
                {error?.data?.error==='Duplicate Voucher Number' 
                ? 'Voucher Number already exists. Please use a different Voucher Number.'
                : 'There was an error in submiting the form. Please try again later. If the error persists, contact support.'}
                </Text>,         
        });
    };
    const onFinish = (values) => {
        const formDataToSubmit = transformData({...values, selectedCustomer, bankChargesLedgerId, userId});
        edit ? updateVoucher(formDataToSubmit) : createVoucher({...formDataToSubmit, orgId});
    };

    useEffect(() => {
        if (isSuccess){
            updateOffsetTransactions({
                params:{orgId, entityId:selectedCustomer['_id'], receiptTransactionId:data.transactionId},
                body: {offsetTransactions: form.getFieldValue('amountOffset')}
            });
        }
        isError && showModalOnSubmitFailed()
    }, [isSuccess, isError, data]);

    useEffect(()=> {isSuccess1 && history.goBack()}, [isSuccess1]);

    return (
        <Spin size="large" 
            spinning={
                [!customerList, !closingBalanceData, !voucherNumber, !bankAccounts, !unpaidInvoices, 
                    isLoading, isUpdating].some(val => val===true)}
        >
            <div style={{
                borderBottom:"ridge", position:"sticky", top:"64px", zIndex:999, backgroundColor:"whitesmoke",
                display:'flex', justifyContent:'space-between', padding:"0px 7px 0px 10px", 
                alignItems:'center'
            }}>
                <Title level={3} style={{marginTop:12}}>{edit ? 'Edit' : 'Record'} Receipt</Title>
            </div>
            {[!customerList, !closingBalanceData, !voucherNumber, !bankAccounts, !unpaidInvoices]
                .every(val => val===false) &&
            <>
            <Form
                form={form}
                labelCol={{lg:4, span:24}}
                wrapperCol={{lg:{span:9, offset:1}, span:24}}
                labelAlign='left'
                layout='horizontal'
                style={{ padding:'40px 20px 0', textAlign:'left'}}
                disabled={edit}  
                initialValues={edit && {customer:receiptData.otherDetails.linkedEntity}}
            >
                <Form.Item label="Customer Name" required={true}>
                    <Input.Group>
                        <Form.Item name="customer" style={{marginBottom: "0px"}}>                   
                            <SelectCustomer
                                onCustomerSelect={handleCustomerSelection} customerList={customerList}
                                defaultValue={edit && receiptData.otherDetails.linkedEntity}/>
                        </Form.Item>
                        {selectedCustomer && 
                            <Typography.Link onClick={() => {setOpenDrawer(true)}} >
                                <IdcardOutlined/> View Customer Details 
                            </Typography.Link>
                        }
                    </Input.Group>
                    {selectedCustomer &&
                    <CustomerDetails
                        data={selectedCustomer} 
                        receivable={selectedCustomer.closingBalance}
                        isOpen={openDrawer} 
                        onClose={() => setOpenDrawer(false)} 
                    />
                    }
                </Form.Item>
            </Form>
            <Form
                form={form}
                labelCol={{lg:4, span:24}}
                wrapperCol={{lg:{span:9, offset:1}, span:24}}
                labelAlign='left'
                layout='horizontal'
                style={{padding:'0 20px 50px', textAlign:'left'}}  
                onFinish={(values) => {
                    console.log(values);
                    summaryData.received === summaryData.used ? onFinish(values) : showModalOnSubmit(values);
                }}
                disabled={!selectedCustomer}
                initialValues={initialValues}
                
            >
                <Form.Item label='Amount Received' required={true}>
                    <Form.Item name='amount' 
                        rules={[{required:true, message:'Please enter the amount received.'}]}
                        style={{marginBottom:10}}
                    >
                        <InputNumber min={0} addonBefore={"₹"} style={{width:"100%"}} 
                            onChange={onReceiptAmtChange}
                            formatter={(value, info)=> {
                                if (!info.userTyping)
                                    return Number(value).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})}
                            }
                        />
                    </Form.Item>
                    {(selectedCustomer && selectedCustomer.closingBalance > 0 && !edit) &&
                    <Checkbox onChange={onCheckBoxChange}>
                        Received full amount ( ₹{Number(selectedCustomer.closingBalance).toLocaleString('en-IN', {minimumFractionDigits:2, maximumFractionDigits:2})})
                    </Checkbox>
                    }
                </Form.Item>

                <Form.Item label='Bank Charges (if any)' name='bankCharges'>
                    <InputNumber style={{width:"100%"}} min={0}/>
                </Form.Item>

                <Form.Item label='Receipt Date' name='date' 
                    rules={[{required:true, message:'Please enter the amount received date.'}]}>
                    <DatePicker style={{width:'100%'}} format="DD-MM-YYYY"/>
                </Form.Item>
                
                <Form.Item label='Receipt #' name='voucherNumber' required={true}
                    rules={[{required:true, message:'Please enter the Receipt voucher number.'}]}
                >
                    <Input/>
                </Form.Item>

                <Form.Item label='Receipt Mode' name='mode'>
                    <Select 
                        options={[{label:'Cash', value:'cash'}, {label:'Bank Remittance', value:'bank'}, 
                            {label:'Cheque', value:'cheque'}, {label:'Credit Card', value:'credit card'}]}
                    />
                </Form.Item>

                <Form.Item label="Deposit To" name="bankLedger" rules={[{required:true, message:'Please select bank/cash account.'}]}>
                    <Select
                        options={bankSelectOpts}
                        placeholder="Select Account"
                    />
                </Form.Item>

                <Form.Item label='Reference#' name='referenceNumber'>
                    <Input/>
                </Form.Item>
                
                <UnpaidInvoices InvoiceData={selectedCustomer?.unpaid || []} form={form} 
                    onUsedAmtChange={onUsedAmtChange} 
                    isFullAmtRcd={selectedCustomer?.closingBalance === summaryData.received}/>

                <AmountSummary data={summaryData}/>

                <Form.Item label='Notes (Internal use. Not visible to customer)' name='notes' 
                    labelCol={{span:24}} wrapperCol={{span:24}}>
                    <Input.TextArea/>
                </Form.Item>
            
            </Form>
            {(edit && !selectedCustomer) && handleCustomerSelection(receiptData.otherDetails?.linkedEntity)}
            {(edit && summaryData.received === 0) && 
                setSummaryData({
                    received:receiptData.otherDetails.totalAmount,
                    used: receiptData.otherDetails.totalAmount - receiptData.otherDetails.pendingAmount,
                })
            }
            {console.log(summaryData.received)}    
            </>}
            <div style={{position:'sticky', bottom:0, backgroundColor:"whitesmoke", borderTop:"2px outset", display:"flex", alignContent:"center", justifyContent:"flex-start",padding:"12px"}}>                
                <Button onClick={() => {form.submit()}} type='primary' loading={isLoading || isUpdating}>
                    {edit ? 'Update' : 'Save'}
                </Button>
                <Button type='secondary' onClick={() => {history.goBack()}} style={{borderColor: "#ddd", margin:"0 10px"}}>Cancel</Button>
            </div>
            
        </Spin>
        
    );
};

export default RecordReceipt;
